// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ExportPro.StorageService.IntegrationTests.Features.InvoiceFeatures
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Creating a invoice after creating a currency, country and customer")]
    [NUnit.Framework.CategoryAttribute("CreateInvoice")]
    public partial class CreatingAInvoiceAfterCreatingACurrencyCountryAndCustomerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "CreateInvoice"};
        
#line 1 "CreateInvoice.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/InvoiceFeatures", "Creating a invoice after creating a currency, country and customer", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The User wants to create a invoice")]
        [NUnit.Framework.TestCaseAttribute("OwnerUserTest@gmail.com", "OwnerUserTest2@", null)]
        [NUnit.Framework.TestCaseAttribute("ClientAdminTest@gmail.com", "ClientAdminTest2@", null)]
        [NUnit.Framework.TestCaseAttribute("OperatorTest@gmail.com", "OperatorTest2@", null)]
        public void TheUserWantsToCreateAInvoice(string email, string password, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("password", password);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The User wants to create a invoice", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
        testRunner.Given(string.Format("The user is logged in with email \'{0}\' and password \'{1}\' and has necessary permi" +
                            "ssions", email, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
        testRunner.And("The user has valid client id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "CurrencyCode"});
                table7.AddRow(new string[] {
                            "USD"});
#line 7
        testRunner.And("The user created following currency for invoice and stored the currency id", ((string)(null)), table7, "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "CurrencyCode"});
                table8.AddRow(new string[] {
                            "GBP"});
#line 10
        testRunner.And("The user created following currency for item and stored the currency id", ((string)(null)), table8, "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Code",
                            "CurrencyId"});
                table9.AddRow(new string[] {
                            "TestUsa####TESTCUSTOMER###",
                            "TESTCOUNTRYCODECode",
                            "temp"});
#line 13
        testRunner.And("The user created following country and stored the country id", ((string)(null)), table9, "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "CountryId",
                            "Name",
                            "Email",
                            "Address"});
                table10.AddRow(new string[] {
                            "temp",
                            "TESTUSER####TESTCUSTOMER",
                            "TESTUSER####TESTCUSTOMER@gmail.com",
                            "TBILISI"});
#line 16
        testRunner.And("The user created following customer and stored the customer id", ((string)(null)), table10, "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "InvoiceNumber",
                            "IssueDate",
                            "DueDate",
                            "CurrencyId",
                            "PaymentStatus",
                            "CustomerId",
                            "ClientId",
                            "ClientCurrencyId"});
                table11.AddRow(new string[] {
                            "123456789#######000",
                            "2025-01-01",
                            "2025-01-31",
                            "temp",
                            "0",
                            "temp",
                            "temp",
                            "temp"});
#line 19
        testRunner.And("The user wants to create following invoice", ((string)(null)), table11, "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Description",
                            "Price",
                            "Status",
                            "CurrencyId"});
                table12.AddRow(new string[] {
                            "ItemTESTInvoice",
                            "NAGARI",
                            "10.50",
                            "0",
                            "temp"});
#line 22
        testRunner.And("the invoice contains the following items", ((string)(null)), table12, "And ");
#line hidden
#line 25
        testRunner.When("the user sends the invoice creation request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
        testRunner.Then("the invoice should be saved in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
