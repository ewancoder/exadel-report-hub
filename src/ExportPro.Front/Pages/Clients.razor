@page "/clients"

@if (IsProcessing)
{
    <div id="app">
        <svg class="loading-progress">
            <circle r="40%" cx="50%" cy="50%" />
            <circle r="40%" cx="50%" cy="50%" />
        </svg>
        <div class="loading-progress-text"></div>
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class=" = "row>
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Clients List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb3">
                @if (CurrentUser?.Role == Role.SuperAdmin)
                {
                    <div class="col-12 text-start">
                        <a href="client/create" class="btn btn-large btn-dark">Create New Client</a>
                    </div>
                }
            </div>
            @if(ClientsList.IsSuccess && ClientsList.Data != null && ClientsList.Data.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var client in ClientsList.Data)
                        {
                            <tr>
                                <td>@client.Name</td>
                                <td>@client.Description</td>
                                <td>

                                    <button class="btn btn-dark">View Users</button>
                                    @if (CurrentUser?.Role == Role.SuperAdmin)
                                    {
                                        <a href="@($"client/update/{client.Id}") class="btn btn-primary">Edit</a>
                                        <button class="btn btn-danger">Delete</button>
                                    }
                                    else
                                    {
                                        foreach (var role in CurrentUser?.ClientRoles)
                                        {
                                            if (role.ClientId == client.Id && role.Role == UserRole.Owner)
                                            {
                                                <a href="@($"client/update/{client.Id}") class="btn btn-primary">Edit</a>
                                            }
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info text-center">
                    <h4>No clients found.</h4>
                </div>
            }
        </div>

    </div>
}


@code {
    public bool IsProcessing { get; set; } = true;
    [Inject] private HttpClient httpClient { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthProvider { get; set; } = default!;
    [Inject] private ILocalStorageService LocalStorage { get; set; } = default!;
    private UserDto? CurrentUser;
    private ApiHelper? apiHelper;
    private Result<IEnumerable<ClientResponse>> ClientsList { get; set; } = new Result<IEnumerable<ClientResponse>>
        {
            IsSuccess = true,
            Data = new List<ClientResponse>()
        };

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            apiHelper = new ApiHelper(httpClient, LocalStorage);
            var result = await apiHelper.GetAsync<UserDto>("api/user/current");
            await LoadClients();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadClients()
    {
        var clients = await apiHelper.GetAsync<Result<IEnumerable<ClientResponse>>>("api/client");
    }
}
