@page "/clients"

<DeleteClientModal @ref="DeleteClientModalRef" OnDelete="DeleteClient"/>

@if (IsProcessing)
{
    <div id="app">
        <svg class="loading-progress">
            <circle r="40%" cx="50%" cy="50%" />
            <circle r="40%" cx="50%" cy="50%" />
        </svg>
        <div class="loading-progress-text"></div>
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class=" = "row>
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Clients List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb3">
                @if (CurrentUser?.Role == Role.SuperAdmin)
                {
                    <div class="col-12 text-start">
                        <button class="btn btn-large btn-dark" @onclick="()=> OpenCreateClientModal()">Create New Client</button>
                    </div>
                }
            </div>
            @if(ClientsList.IsSuccess && ClientsList.Data != null && ClientsList.Data.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var client in ClientsList.Data)
                        {
                            <tr>
                                <td>@client.Name</td>
                                <td>@client.Description</td>
                                <td>

                                    <button class="btn btn-dark">View Users</button>
                                    @if (CurrentUser?.Role == Role.SuperAdmin)
                                    {
                                        <button class="btn btn-primary" @onclick="() => OpenEditClientModal(client.Id)">Edit</button>
                                        <button class="btn btn-danger" @onclick="() => OpenDeleteClientModal(client.Id, client.Name)">Delete</button>
                                    }
                                    else
                                    {
                                        foreach (var role in CurrentUser?.ClientRoles)
                                        {
                                            if (role.ClientId == client.Id && role.Role == UserRole.Owner)
                                            {
                                                <button class="btn btn-primary" @onclick="() => OpenEditClientModal(client.Id)">Edit</button>
                                            }
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info text-center">
                    <h4>No clients found.</h4>
                </div>
            }
        </div>

    </div>
}


@code {
    public bool IsProcessing { get; set; } = true;
    [Inject] private HttpClient httpClient { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthProvider { get; set; } = default!;
    [Inject] private ILocalStorageService LocalStorage { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;
    private UserDto? CurrentUser;
    private ApiHelper? apiHelper;
    private Result<IEnumerable<ClientResponse>> ClientsList { get; set; } = new Result<IEnumerable<ClientResponse>>
        {
            IsSuccess = true,
            Data = new List<ClientResponse>()
        };

    private ClientUpsertModal? ClientModalRef;
    private DeleteClientModal? DeleteClientModalRef;
    private ClientUpsertRequest EditableClient { get; set; }
    private string ModalTitle = "Create Client";
    private string ButtonName = "Save";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            apiHelper = new ApiHelper(httpClient, LocalStorage);
            var result = await apiHelper.GetAsync<UserDto>("api/user/current");
            await LoadClients();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadClients()
    {
        var clients = await apiHelper.GetAsync<IEnumerable<ClientResponse>>("api/client");
    }

    private async Task OpenCreateClientModal()
    {
        EditableClient = new ClientUpsertRequest();
        ModalTitle = "Create Client";
        ButtonName = "Create";
        await JS.InvokeVoidAsync("ShowModal", "clientUpsertModal");
    }

    private async Task OpenEditClientModal(Guid clientId)
    {
        var client = await apiHelper.GetAsync<ClientResponse>($"api/client/{clientId}");
        if (client.IsSuccess)
        {
            EditableClient = new ClientUpsertRequest { Description = client.Data.Description, Id = client.Data.Id, Name = client.Data.Name};
            ModalTitle = "Edit Client";
            ButtonName = "Update";
            await JS.InvokeVoidAsync("ShowModal", "clientUpsertModal");
        }
    }
    private async Task HandleClientSubmit(ClientUpsertRequest client)
    {
        if (client.Id == Guid.Empty)
        {
            var resp = await apiHelper.PostAsync<ClientUpsertRequest, ClientResponse>("api/client", client);
            if (resp.IsSuccess)
            {
                await JS.ToastrSucess($"Client {client.Name} created.");
            }
        }
        else
        {
            var resp = await apiHelper.PutAsync<ClientUpsertRequest, ClientResponse>($"api/client/{client.Id}", client);
            if (resp.IsSuccess)
            {
                await JS.ToastrSucess($"Client {client.Name} updated.");
            }
        }

        await JS.InvokeVoidAsync("HideModal", "clientUpsertModal");
        await LoadClients();
        StateHasChanged();
    }

    private async Task DeleteClient(Guid clientId)
    {
        await JS.InvokeVoidAsync("HideModal", "clientUpsertModal");
        var res = await apiHelper.DeleteAsync<ClientResponse>($"api/client/{clientId}");
        if (res.IsSuccess)
        {
            await JS.ToastrSucess("Client deleted.");
            await LoadClients();
        }
    }

    private async Task OpenDeleteClientModal(Guid clientId, string clientName)
    {
        if (DeleteClientModalRef != null)
        {
            await DeleteClientModalRef.Show(clientId, clientName);
        }
    }
}
 