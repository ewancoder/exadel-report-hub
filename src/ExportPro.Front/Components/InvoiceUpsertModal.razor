@using ExportPro.Front.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

<div class="modal fade" id="invoiceUpsertModal" tabindex="-1" aria-labelledby="invoiceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">@ModalTitle</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <h5 class="mt-3">Create New Customer</h5>
                <EditForm Model="customerModel">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-2">
                        <label class="form-label">Customer Name</label>
                        <InputText class="form-control" @bind-Value="customerModel.Name" />
                    </div>

                    <div class="mb-2">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="customerModel.Email" />
                    </div>

                    <div class="mb-2">
                        <label class="form-label">Address</label>
                        <InputText class="form-control" @bind-Value="customerModel.Address" />
                    </div>

                    <div class="mb-2">
                        <label class="form-label">Country</label>
                        <InputSelect class="form-select" @bind-Value="customerModel.CountryId">
                            <option value="">Select Country</option>
                            @foreach (var country in Countries)
                            {
                                <option value="@country.Id">@country.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <button type="submit" class="btn btn-secondary mt-2" @onclick="HandlerInternalCustomerSubmit">Save Customer</button>
                </EditForm>
                <EditForm Model="internalModel" OnValidSubmit="HandleInternalSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Issue Date</label>
                            <InputDate class="form-control" @bind-Value="internalModel.IssueDate" />
                        </div>
                        <div class="col">
                            <label class="form-label">Due Date</label>
                            <InputDate class="form-control" @bind-Value="internalModel.DueDate" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Client</label>
                        <InputSelect class="form-select" @bind-Value="internalModel.ClientId"
                        @onchange="async e => await OnClientChanged(e)">
                            <option value="">Select Client</option>
                            @foreach (var client in Clients)
                            {
                                <option value="@client.Id">@client.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Bank Account Number</label>
                        <InputText class="form-control" @bind-Value="internalModel.BankAccountNumber" />
                    </div>

                    <div class="mb-2">
                        <label class="form-label">Currency</label>
                        <InputSelect class="form-select" @bind-Value="internalModel.ClientCurrencyId">
                            <option value="">Select Currency</option>
                            @foreach (var currency in Currencies)
                            {
                                <option value="@currency.Id">@currency.CurrencyCode</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Select Items</label>
                        <select multiple class="form-select" @onchange="async e => await OnItemSelectionChanged(e)">
                            @foreach (var item in AvailableItems)
                            {
                                <option value="@item.Id.ToString()" selected="@internalModel.Items.Any(i => i.Name == item.Name)">
                                    @item.Name
                                </option>
                            }
                        </select>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-dark">@ButtonName</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private InvoiceDto internalModel = new();
    private List<ItemDto> AvailableItems = new();
    private HashSet<Guid> SelectedItemIds = new();
    private readonly CustomerCreateRequest customerModel = new();

    [Parameter] public string ModalTitle { get; set; } = "Create Invoice";
    [Parameter] public string ButtonName { get; set; } = "Save";
    [Parameter] public EventCallback<InvoiceDto> OnValidSubmit { get; set; }
    [Parameter] public EventCallback<CustomerCreateRequest> OnCustomerCreate { get; set; }
    [Parameter] public List<ClientDto> Clients { get; set; } = new();
    [Parameter] public List<CurrencyDto> Currencies { get; set; } = new();
    [Parameter] public List<CountryDto> Countries { get; set; } = new();

    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private ApiHelper ApiHelper { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;

    public async Task Show(List<CurrencyDto> currencies, List<CountryDto> countries, List<ClientDto> clients)
    {
        Currencies = currencies;
        Countries = countries;
        Clients = clients;
        internalModel = new(); // Reset
        AvailableItems.Clear();
        await JS.InvokeVoidAsync("ShowModal", "invoiceUpsertModal");
    }

    public async Task Hide()
    {
        await JS.InvokeVoidAsync("HideModal", "invoiceUpsertModal");
    }

    private async Task OnClientChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var clientId))
        {
            internalModel.ClientId = clientId;
            await LoadItemsForClient(clientId);
        }
    }

    private async Task LoadItemsForClient(Guid clientId)
    {
        var response = await Http.GetFromJsonAsync<Result<List<ItemDto>>>($"api/client/{clientId}/items");
        if (response?.IsSuccess == true)
        {
            AvailableItems = response.Data;
        }
    }

    private async Task OnItemSelectionChanged(ChangeEventArgs e)
    {
        var selected = e.Value?.ToString()?.Split(',').Select(id => Guid.TryParse(id, out var g) ? g : Guid.Empty).Where(g => g != Guid.Empty).ToHashSet();

        if (selected != null)
        {
            internalModel.Items = AvailableItems
                .Where(i => selected.Contains(i.Id))
                .Select(i => new ItemDtoForClient
                    {
                        Name = i.Name ?? "",
                        Description = i.Description ?? "",
                        Price = (double)i.Price,
                        Status = i.Status,
                        CurrencyId = Guid.Empty,
                        CurrencyName = i.Currency ?? ""
                    })
                .ToList();
        }
    }

    private async Task HandleInternalSubmit()
    {
        await OnValidSubmit.InvokeAsync(internalModel);
        await JS.InvokeVoidAsync("HideModal", "invoiceUpsertModal");
    }

    private async Task HandlerInternalCustomerSubmit()
    {
        await OnCustomerCreate.InvokeAsync(customerModel);
        await JS.ToastrSucess("customer added");
    }
}
